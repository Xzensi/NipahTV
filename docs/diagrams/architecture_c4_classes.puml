@startuml architecture_classes

' Base Colors
!$color_bg             = "#272822"
!$color_fg             = "#F8F8F2"
!$color_border         = "#75715E"

' Accent Colors
!$color_accent_red     = "#F92672"
!$color_accent_green   = "#A6E22E"
!$color_accent_yellow  = "#3C3B2F"
!$color_accent_blue    = "#66D9EF"
!$color_accent_orange  = "#FD971F"
!$color_accent_purple  = "#AE81FF"

' Specialized
!$color_datatype_bg    = "#444233"
!$color_interface_bg   = "#2F556B"
!$color_note_bg        = "#49483E"
!$color_note_border    = "#75715E"
!$color_note_font      = "#F8F8F2"

skinparam {
    ' roundCorner 10
    ' padding 12
    ' linetype ortho
    ' Nodesep 120
    ' Ranksep 120
    wrapWidth 200
    maxMessageSize 150

    Shadowing false
    BackgroundColor $color_bg

    DefaultFontColor $color_fg
    DefaultFontName "Consolas", "Monaco", monospace
    DefaultFontSize 14

    ArrowColor $color_accent_red
    ArrowFontColor $color_fg
    ArrowThickness 3

    BorderColor $color_border

    PackageBorderColor $color_accent_purple
    PackageBackgroundColor $color_bg
    PackageTitleFontColor $color_accent_blue
    PackageFontStyle bold

    ClassBackgroundColor $color_accent_yellow
    ClassBorderColor $color_accent_red
    ClassFontColor $color_fg
    ClassAttributeFontColor $color_accent_green
    ClassStereotypeFontColor $color_accent_orange

    InterfaceBackgroundColor $color_interface_bg
    InterfaceBorderColor $color_accent_red
    InterfaceFontColor $color_fg
    InterfaceAttributeFontColor $color_fg
    InterfaceStereotypeFontColor $color_accent_orange

    NoteBackgroundColor $color_note_bg
    NoteBorderColor $color_note_border
    NoteFontColor $color_note_font

    LegendBackgroundColor $color_border
    LegendBorderColor $color_fg
    LegendFontColor $color_fg
}

skinparam class<<datatype>> {
    BackgroundColor $color_datatype_bg
    BorderColor $color_border
    FontColor $color_fg
    AttributeFontColor $color_accent_blue
    StereotypeFontColor $color_accent_orange
}

skinparam rectangle<<System_Boundary>><<Container_Boundary>> {
    BorderColor $color_accent_purple
    FontColor $color_accent_purple
}


' Interfaces for Lollipop Notation
interface PublishesEventBus {
 .. Represents publishing to EventBus ..
}
interface SubscribesEventBus {
 .. Represents subscribing to EventBus ..
}

' High-Level Grouping: Service Worker Internals
package ServiceWorker {
    package Core {
        class ServiceWorkerOrchestrator {
            + init()
        }
        note top of ServiceWorkerOrchestrator : Initializes and owns core Service Worker services.

        class ClientConnectionManager {
             + handleConnection(port: Port)
             + handleDisconnect(port: Port)
             + handleConnectionError(event: ConnectionErrorEvent)
        }
        note top of ClientConnectionManager : Manages client Port connection lifecycle (connect, disconnect, errors).

        class ClientMessageHandler {
             + handleMessage(message: any, port: Port)
        }
        note top of ClientMessageHandler : Receives messages from ClientConnectionManager and routes them to appropriate services.

        class ClientEventNotifier {
             - handleProcessedChatMessage(event: ProcessedChatMessageEvent)
             - handleChannelEvent(event: ChannelEventReceivedEvent)
             - handleEmoteUpdate(event: EmoteSetUpdateEvent)
             - handleConnectionClosed(event: ConnectionClosedEvent)
        }
        note top of ClientEventNotifier : Subscribes to internal events and broadcasts them to relevant client Ports.

        class EventBus <<Service>> {
            + subscribe(eventType: string, handler: Function)
            + unsubscribe(eventType: string, handler: Function)
            + publish(event: BaseEvent)
        }
        note top of EventBus : Central hub for decoupled event publishing and subscription within the Service Worker.

        class ClientSubscriptionManager {
            + addSubscription(roomIdentifier: RoomIdentifier, port: Port, emoteScopeId: string)
            + removeSubscription(port: Port)
            + getPortsForRoom(roomIdentifier: RoomIdentifier): Set<Port>
            + getScopeIdForRoom(roomIdentifier: RoomIdentifier): string | undefined
        }
        note top of ClientSubscriptionManager : Tracks client ports per room, manages RoomSubscription lifecycle, notifies EmoteLifecycleManager on disconnect.

        class MessageFeedProcessorPipeline <<Shared>> {
            + init()
            + use(middleware: Middleware)
            - handleChatMessage(event: ChatMessageReceivedEvent)
        }
        note top of MessageFeedProcessorPipeline : Subscribes to raw chat messages, gets relevant emote contexts, queries EmoteRegistry, applies transformations, publishes processed messages.

        class UserStore <<Service>> {
         .. Service Worker global User Data Service ..
        }
        note top of UserStore : Stores User data globally within the Service Worker instance, ref-counted by RoomSubscriptions.

        class RoomSubscription <<datatype>> {
         .. Represents Room Subscription State ..
        }
        note top of RoomSubscription : Represents an active subscription to a room, managed by ClientSubscriptionManager. Contains ports, MessageStore, user refs, scope ID.

        class MessageStore {
         .. Stores Messages for a Room ..
        }
        note top of MessageStore : Stores messages for a single RoomSubscription. Lifecycle tied to the RoomSubscription.

    }

    package EmoteSystem {
        class EmoteLifecycleManager <<ServiceWorker Component>> {
            + registerSessionScope(emoteScopeId: string)
            + associateRoom(roomKey: string, emoteScopeId: string)
            + disassociateRoom(roomKey: string)
            + addEmoteSourceToScope(emoteScopeId: string, request: EmoteFetchRequest)
            + getEmoteContextKeysForScope(emoteScopeId: string): Set<string>
            - _generateEmoteContextKey(request: EmoteFetchRequest): string
            - _incrementEmoteContextRef(emoteContextKey: string)
            - _decrementEmoteContextRef(emoteContextKey: string)
        }
        note top of EmoteLifecycleManager : Manages EmoteScope lifecycles, tracks emote context references, and triggers EmoteManager subscriptions.

        class EmoteScopeState <<datatype>> {
         .. Representing the concept ..
        }
        note top of EmoteScopeState : (Conceptual) Internal state for an EmoteScope managed by EmoteLifecycleManager.\nDefined in architecture_datatypes.puml.


        class EmoteManager <<ServiceWorker Component>> {
            + subscribeToEmoteSource(request: EmoteFetchRequest)
            + unsubscribeFromEmoteSource(request: EmoteFetchRequest)
            - handleProviderUpdate(update: EmoteSetUpdate)
        }
        note top of EmoteManager : Orchestrates actual fetching via IEmoteProviders and manages EmoteRegistry based on subscribe/unsubscribe calls from EmoteLifecycleManager.

        class EmoteRegistry <<ServiceWorker Component>> {
            + addOrUpdateEmoteSet(emoteSet: EmoteSet, emoteContextKey: string)
            + removeEmoteSet(setId: string)
            + getEmoteByName(name: string, relevantEmoteContextKeys: string[]): Emote | undefined
            + getAllEmoteSetsForContexts(emoteContextKeys: string[]): EmoteSet[]
        }
        note top of EmoteRegistry : Central storage for emotes and emote sets. Queried by MessageFeedProcessorPipeline using context info.

        interface IEmoteProvider {
            + fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
            + {abstract} subscribeToUpdates?(request: EmoteFetchRequest, updateCallback: (update: EmoteSetUpdate) => void): Promise<void>
            + {abstract} unsubscribeFromUpdates?(request: EmoteFetchRequest): Promise<void>
            + {abstract} canHandleRequest?(request: EmoteFetchRequest): boolean
        }
        note top of IEmoteProvider : Interface for emote providers. Fetches sets based on EmoteFetchRequest, may support updates.
    }

    package PlatformImplementations {
        class TwitchPlatformAdapter {
            + getCapabilities(): PlatformCapabilities
            + subscribe(intent: SubscriptionIntent)
            + publishEvent(event: BaseEvent)
        }
        note top of TwitchPlatformAdapter : Platform Implementations (Black Boxes)

        class YouTubePlatformAdapter {
            + getCapabilities(): PlatformCapabilities
            + subscribe(intent: SubscriptionIntent)
            + publishEvent(event: BaseEvent)
        }
        class KickPlatformAdapter {
            + getCapabilities(): PlatformCapabilities
            + subscribe(intent: SubscriptionIntent)
            + publishEvent(event: BaseEvent)
        }
    }

    package EmoteProviderImplementations {
        class SeventvEmoteProvider {
            + fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
        }
        SeventvEmoteProvider --|> ServiceWorker.EmoteSystem.IEmoteProvider : implements
        note top of SeventvEmoteProvider : Emote Provider Implementations

        class KickEmoteProvider {
            + fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
        }
        KickEmoteProvider --|> ServiceWorker.EmoteSystem.IEmoteProvider : implements
    }
}

' Content Script UI (Separate Top-Level Package)
package ContentScriptUI {
    class ContentScriptManager <<ContentScript>> {
        + connectToServiceWorker()
        + detectAndAssociateContext()
        + generateScopeId(): string
        + registerSessionScope(scopeId: string)
        + subscribeToRoom(roomIdentifier: RoomIdentifier, scopeId: string)
        + addEmoteSourceToScope(scopeId: string, request: EmoteFetchRequest)
        + sendHeartbeat()
        - handleServiceWorkerMessage(event: BaseEvent)
        - handleDisconnect()
    }
    note top of ContentScriptManager : Manages communication with Service Worker, detects context, generates scope, initiates subscriptions and requests.

    class MessageFeedView <<UI Component (SolidJS)>> {
        + renderProcessedMessage(data: ProcessedChatMessageEvent)
        + updateEmotes(data: EmoteSetUpdateEvent)
        + {abstract} renderChannelEvent?(data: ChannelEventReceivedEvent)
    }
    note top of MessageFeedView : Renders messages, emotes, and other UI elements in the content script.
}


' --- Simplified Relationships ---

' ServiceWorkerOrchestrator Relationships (Ownership)
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientConnectionManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientMessageHandler : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientEventNotifier : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientSubscriptionManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.EmoteSystem.EmoteLifecycleManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.EmoteSystem.EmoteManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.MessageFeedProcessorPipeline : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.UserStore : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.EventBus : manages

' ClientConnectionManager Relationships
ServiceWorker.Core.ClientConnectionManager ..> ServiceWorker.Core.ClientMessageHandler : forwards message
ServiceWorker.Core.ClientConnectionManager ..> ServiceWorker.Core.ClientSubscriptionManager : notifies disconnect

' ClientMessageHandler Relationships
ServiceWorker.Core.ClientMessageHandler ..> ServiceWorker.Core.ClientSubscriptionManager : delegates client requests
ServiceWorker.Core.ClientMessageHandler ..> ServiceWorker.EmoteSystem.EmoteLifecycleManager : delegates registerSessionScope, etc.

' ClientEventNotifier Relationships
ServiceWorker.Core.ClientEventNotifier -() SubscribesEventBus
ServiceWorker.Core.ClientEventNotifier ..> ServiceWorker.Core.ClientSubscriptionManager : gets ports for room

' EventBus Relationships (No direct arrows needed for subscribers/publishers using lollipops)

' Event Publishing via Lollipop Interface
ServiceWorker.Core.MessageFeedProcessorPipeline -() PublishesEventBus
ServiceWorker.EmoteSystem.EmoteManager -() PublishesEventBus
ServiceWorker.PlatformImplementations.TwitchPlatformAdapter -() PublishesEventBus
ServiceWorker.PlatformImplementations.YouTubePlatformAdapter -() PublishesEventBus
ServiceWorker.PlatformImplementations.KickPlatformAdapter -() PublishesEventBus

' EmoteLifecycleManager Relationships
ServiceWorker.EmoteSystem.EmoteLifecycleManager *-- ServiceWorker.EmoteSystem.EmoteScopeState : manages state
ServiceWorker.EmoteSystem.EmoteLifecycleManager ..> ServiceWorker.EmoteSystem.EmoteManager : calls subscribeToEmoteSource / unsubscribeFromEmoteSource

' EmoteManager Relationships
ServiceWorker.EmoteSystem.EmoteManager ..> ServiceWorker.EmoteSystem.IEmoteProvider : uses
ServiceWorker.EmoteSystem.EmoteManager ..> ServiceWorker.EmoteSystem.EmoteRegistry : updates

' IEmoteProvider Relationships
ServiceWorker.EmoteSystem.IEmoteProvider <.. ServiceWorker.EmoteSystem.EmoteManager : invokes updateCallback

' MessageFeedProcessorPipeline Relationships
ServiceWorker.Core.MessageFeedProcessorPipeline -() SubscribesEventBus
ServiceWorker.Core.MessageFeedProcessorPipeline ..> ServiceWorker.EmoteSystem.EmoteRegistry : queries emotes
ServiceWorker.Core.MessageFeedProcessorPipeline ..> ServiceWorker.EmoteSystem.EmoteLifecycleManager : gets emoteContextKeys for scope
ServiceWorker.Core.MessageFeedProcessorPipeline ..> ServiceWorker.Core.ClientSubscriptionManager : gets scopeId for room

' ContentScriptManager Relationships
ContentScriptUI.ContentScriptManager ..> ServiceWorker.Core.ClientConnectionManager : connects via Port, sends messages
ContentScriptUI.ContentScriptManager o-- ContentScriptUI.MessageFeedView : manages

' ClientSubscriptionManager Relationships
ServiceWorker.Core.ClientSubscriptionManager ..> ServiceWorker.EmoteSystem.EmoteLifecycleManager : calls disassociateRoom
ServiceWorker.Core.ClientSubscriptionManager "1" *-- "*" ServiceWorker.Core.RoomSubscription : manages
ServiceWorker.Core.ClientSubscriptionManager ..> ServiceWorker.Core.MessageStore : adds message
ServiceWorker.Core.ClientSubscriptionManager ..> ServiceWorker.Core.UserStore : updates ref counts

' RoomSubscription Relationships
ServiceWorker.Core.RoomSubscription *-- ServiceWorker.Core.MessageStore : owns
ServiceWorker.Core.RoomSubscription ..> ServiceWorker.EmoteSystem.EmoteScopeState : references via ID

' PlatformImplementations Relationships - No direct arrows needed

' EmoteProviderImplementations Relationships
ServiceWorker.EmoteSystem.EmoteManager ..> ServiceWorker.EmoteProviderImplementations.SeventvEmoteProvider : uses
ServiceWorker.EmoteSystem.EmoteManager ..> ServiceWorker.EmoteProviderImplementations.KickEmoteProvider : uses

@enduml
