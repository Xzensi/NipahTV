@startuml architecture_classes
allowmixing

' Base Colors
!$color_bg             = "#272822"
!$color_fg             = "#F8F8F2"
!$color_border         = "#75715E"

' Accent Colors
!$color_accent_red     = "#F92672"
!$color_accent_green   = "#A6E22E"
!$color_accent_yellow  = "#3C3B2F"
!$color_accent_blue    = "#66D9EF"
!$color_accent_orange  = "#FD971F"
!$color_accent_purple  = "#AE81FF"

' Specialized
!$color_datatype_bg    = "#444233"
!$color_interface_bg   = "#2F556B"
!$color_note_bg        = "#49483E"
!$color_note_border    = "#75715E"
!$color_note_font      = "#F8F8F2"
!$color_ext_system_bg  = "#5D2E4F"

skinparam {
    ' roundCorner 10
    ' padding 12
    ' linetype ortho
    ' Nodesep 120
    ' Ranksep 120
    wrapWidth 200
    maxMessageSize 150

    Shadowing false
    BackgroundColor $color_bg

    DefaultFontColor $color_fg
    DefaultFontName "Consolas", "Monaco", monospace
    DefaultFontSize 14

    ArrowColor $color_accent_red
    ArrowFontColor $color_fg
    ArrowThickness 3

    BorderColor $color_border

    PackageBorderColor $color_accent_purple
    PackageBackgroundColor $color_bg
    PackageTitleFontColor $color_accent_blue
    PackageFontStyle bold

    ClassBackgroundColor $color_accent_yellow
    ClassBorderColor $color_accent_red
    ClassFontColor $color_fg
    ClassAttributeFontColor $color_accent_green
    ClassStereotypeFontColor $color_accent_orange

    InterfaceBackgroundColor $color_interface_bg
    InterfaceBorderColor $color_accent_red
    InterfaceFontColor $color_fg
    InterfaceAttributeFontColor $color_fg
    InterfaceStereotypeFontColor $color_accent_orange

    NoteBackgroundColor $color_note_bg
    NoteBorderColor $color_note_border
    NoteFontColor $color_note_font

    LegendBackgroundColor $color_border
    LegendBorderColor $color_fg
    LegendFontColor $color_fg
}

skinparam class<<datatype>> {
    BackgroundColor $color_datatype_bg
    BorderColor $color_border
    FontColor $color_fg
    AttributeFontColor $color_accent_blue
    StereotypeFontColor $color_accent_orange
}

skinparam rectangle<<System_Boundary>><<Container_Boundary>> {
    BorderColor $color_accent_purple
    FontColor $color_accent_purple
}

skinparam rectangle<<External_System>> {
    BackgroundColor $color_ext_system_bg
    BorderColor $color_accent_red
    FontColor $color_fg
}


' Interfaces for Lollipop Notation
interface PublishesEventBus {
 .. Represents publishing to EventBus ..
}
interface SubscribesEventBus {
 .. Represents subscribing to EventBus ..
}

' External Systems
rectangle "==7TV Event Service\n----\nevents.7tv.io\n----\nProvides real-time updates for\nuser entitlements, cosmetics, etc.\nvia WebSocket." <<External_System>> as ExtSeventvWS

' High-Level Grouping: Service Worker Internals
package ServiceWorker {
    package Core {
        class ServiceWorkerOrchestrator {
            + init()
        }
        note top of ServiceWorkerOrchestrator : Initializes and owns core services.\nInstantiates Emote Providers & registers them with EmoteManager.\nInstantiates Integration Managers (e.g., 7TV) & registers their middleware with Pipeline.

        class ClientConnectionManager {
             + handleConnection(port: Port)
             + handleDisconnect(port: Port)
             + handleConnectionError(event: ConnectionErrorEvent)
        }
        note top of ClientConnectionManager : Manages client Port connection lifecycle (connect, disconnect, errors).

        class ClientMessageHandler {
             + handleMessage(message: any, port: Port)
        }
        note top of ClientMessageHandler : Receives messages from ClientConnectionManager.\nRoutes them to appropriate services (e.g., addEmoteSourceToRoom -> EmoteLifecycleManager).

        class ClientEventNotifier {
             - handleReadyToBroadcast(event: ReadyToBroadcastMessageEvent)
        }
        note top of ClientEventNotifier : Subscribes to ReadyToBroadcastMessageEvent and broadcasts final processed data to relevant client Ports.

        class EventBus <<Service>> {
            + subscribe(eventType: string, handler: Function)
            + unsubscribe(eventType: string, handler: Function)
            + publish(event: BaseEvent)
        }
        note top of EventBus : Central hub for decoupled event publishing and subscription within the Service Worker.

        class ClientSubscriptionManager {
            + addSubscription(roomIdentifier: RoomIdentifier, port: Port): RoomSubscription
            + removeSubscription(port: Port)
            + getPortsForRoom(roomIdentifier: RoomIdentifier): Set<Port>
            + getRoomSubscription(roomIdentifier: RoomIdentifier): RoomSubscription | undefined
        }
        note top of ClientSubscriptionManager : Tracks client ports per room, manages RoomSubscription lifecycle.\nNotifies EmoteLifecycleManager & Integration Managers on creation/destruction.\nPublishes RoomSubscriptionDestroyedEvent for internal cleanup.

        class MessageProcessorService {
            - handleRawMessage(event: ChatMessageReceivedEvent)
            - handleEmoteUpdate(event: EmoteSetUpdateEvent)
            - _processAndCache(message: MessageFeedEntry, roomSub: RoomSubscription): ProcessedChatMessageData
        }
        note top of MessageProcessorService : Subscribes to raw messages & emote updates.\nOrchestrates on-demand processing: checks cache, invokes pipeline on miss (using keys from EmoteLifecycleManager for the room), caches result, publishes ReadyToBroadcastMessageEvent. Handles cache invalidation.

        class MessageFeedProcessorPipeline <<Shared>> {
            + init()
            + use(middleware: Middleware)
            + process(rawMessage: MessageFeedEntry, sender: User, emoteContextKeys: Set<string>): ProcessedChatMessageData
        }
        note top of MessageFeedProcessorPipeline : Invoked on-demand by MessageProcessorService.\nProcesses raw message using sender's User data and relevant emote context keys.\nApplies registered middleware transformations (emote replacement, third-party cosmetics like 7TV).

        class UserStore <<Room Scoped>> {
             - users: Map<string, User>
             + getUser(userId: string): User | undefined
             + addOrUpdateUser(userId: string, displayName: string, entitlements: PlatformEntitlementData[])
        }
        note top of UserStore : Stores User data (incl. platform entitlements) scoped to a single RoomSubscription.

        class LRUMessageCache <<Room Scoped>> {
            + get(messageId: string): ProcessedChatMessageData | undefined
            + set(messageId: string, data: ProcessedChatMessageData)
            + invalidate()
            + invalidateUser(userId: string) ' Optional: For user-specific cosmetic changes?
        }
        note top of LRUMessageCache : Stores processed message results scoped to a single RoomSubscription. Invalidated on emote updates or specific third-party events.

        class RoomSubscription <<datatype>> {
             + ports: Set<Port>
             + messageStore: MessageStore
             + userStore: UserStore
             + messageCache: LRUMessageCache
        }
        note top of RoomSubscription : Represents an active subscription to a room, managed by ClientSubscriptionManager.\nContains ports and room-scoped stores/cache.

        class MessageStore <<Room Scoped>> {
             + addMessage(msg: MessageFeedEntry)
             + getMessage(messageId: string): MessageFeedEntry | undefined
             + getHistory(limit: number): MessageFeedEntry[]
        }
        note top of MessageStore : Stores raw MessageFeedEntry objects for a single RoomSubscription.\nLifecycle tied to the RoomSubscription.

    }

    package EmoteSystem {
        class EmoteLifecycleManager <<ServiceWorker Component>> {
            + addEmoteSourceToRoom(roomIdentifier: RoomIdentifier, request: EmoteFetchRequest)
            + removeEmoteSourcesForRoom(roomIdentifier: RoomIdentifier)
            + getEmoteContextKeysForRoom(roomIdentifier: RoomIdentifier): Set<string>
            - _generateEmoteContextKey(request: EmoteFetchRequest): string
            - _incrementEmoteContextRef(emoteContextKey: string, roomIdentifier: RoomIdentifier)
            - _decrementEmoteContextRef(emoteContextKey: string, roomIdentifier: RoomIdentifier)
        }
        note top of EmoteLifecycleManager : Tracks emote context references per RoomSubscription.\nTriggers EmoteManager subscriptions based on ref counts.\nProvides context keys needed for a specific room.

        class EmoteManager <<ServiceWorker Component>> {
            - providers: Map<string, IEmoteProvider>
            + registerProvider(provider: IEmoteProvider)
            + subscribeToEmoteSource(request: EmoteFetchRequest)
            + unsubscribeFromEmoteSource(request: EmoteFetchRequest)
            - handleProviderUpdate(update: EmoteSetUpdate)
        }
        note top of EmoteManager : Orchestrates fetching via registered IEmoteProviders based on calls from EmoteLifecycleManager.\nManages EmoteRegistry.

        class EmoteRegistry <<ServiceWorker Component>> {
            + addOrUpdateEmoteSet(emoteSet: EmoteSet, emoteContextKey: string)
            + removeEmoteSet(setId: string)
            + getEmoteByName(name: string, relevantEmoteContextKeys: string[]): Emote | undefined
            + getAllEmoteSetsForContexts(emoteContextKeys: string[]): EmoteSet[]
        }
        note top of EmoteRegistry : Central storage for emotes and emote sets. Queried by MessageFeedProcessorPipeline using context info.

        interface IEmoteProvider {
            + fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
            + {abstract} subscribeToUpdates?(request: EmoteFetchRequest, updateCallback: (update: EmoteSetUpdate) => void): Promise<void>
            + {abstract} unsubscribeFromUpdates?(request: EmoteFetchRequest): Promise<void>
            + {abstract} canHandleRequest?(request: EmoteFetchRequest): boolean
        }
        note top of IEmoteProvider : Interface for emote providers. Fetches sets based on EmoteFetchRequest, may support updates.
    }

    package PlatformImplementations {
        class TwitchPlatformAdapter {
            + getCapabilities(): PlatformCapabilities
            + subscribe(intent: SubscriptionIntent)
            + publishEvent(event: BaseEvent) ' Publishes RAW events
        }
        note top of TwitchPlatformAdapter : Parses platform data, updates room's UserStore, publishes raw events.

        class YouTubePlatformAdapter {
            + getCapabilities(): PlatformCapabilities
            + subscribe(intent: SubscriptionIntent)
            + publishEvent(event: BaseEvent) ' Publishes RAW events
        }
        note top of YouTubePlatformAdapter : Parses platform data, updates room's UserStore, publishes raw events.

        class KickPlatformAdapter {
            + getCapabilities(): PlatformCapabilities
            + subscribe(intent: SubscriptionIntent)
            + publishEvent(event: BaseEvent) ' Publishes RAW events
        }
        note top of KickPlatformAdapter : Parses platform data, updates room's UserStore, publishes raw events.
    }

    package EmoteProviderImplementations {
        class SeventvEmoteProvider {
            + fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
        }
        SeventvEmoteProvider --|> ServiceWorker.EmoteSystem.IEmoteProvider : implements
        note top of SeventvEmoteProvider : Implements IEmoteProvider.\nSubscribes to RoomSubscriptionDestroyedEvent for internal cleanup.

        class KickEmoteProvider {
            + fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
        }
        KickEmoteProvider --|> ServiceWorker.EmoteSystem.IEmoteProvider : implements
        note top of KickEmoteProvider : Implements IEmoteProvider.\nSubscribes to RoomSubscriptionDestroyedEvent for internal cleanup.
    }

    package ThirdParty.Seventv {
        class SeventvIntegrationManager {
            - ws: WebSocket
            - state: Map<string, any> ' Simplified state representation
            + init()
            + getPipelineMiddleware(): Middleware
            + handleRoomSubscriptionCreated(roomIdentifier: RoomIdentifier)
            - handleWebSocketMessage(event: MessageEvent)
            - handleRoomSubscriptionDestroyed(event: RoomSubscriptionDestroyedEvent)
        }
        note top of SeventvIntegrationManager : Manages 7TV WebSocket connection (events.7tv.io),\nreceives async updates (cosmetics, entitlements),\nmaintains internal state, provides middleware for Pipeline.
    }
}

' Content Script UI (Separate Top-Level Package)
package ContentScriptUI {
    class ContentScriptManager <<ContentScript>> {
        + connectToServiceWorker()
        + detectAndAssociateContext()
        + subscribeToRoom(roomIdentifier: RoomIdentifier)
        + addEmoteSourceToRoom(roomIdentifier: RoomIdentifier, request: EmoteFetchRequest)
        + sendHeartbeat()
        - handleServiceWorkerMessage(event: BaseEvent)
        - handleDisconnect()
    }
    note top of ContentScriptManager : Manages communication with Service Worker, detects context, initiates subscriptions and requests emote sources per room.

    class MessageFeedView <<UI Component (SolidJS)>> {
        + renderProcessedMessage(data: ProcessedChatMessageData) ' Updated data type
        + updateEmotes(data: EmoteSetUpdateEvent)
        + {abstract} renderChannelEvent?(data: ChannelEventReceivedEvent)
    }
    note top of MessageFeedView : Renders messages, emotes, and other UI elements in the content script.
}


' --- Simplified Relationships ---

' ServiceWorkerOrchestrator Relationships (Ownership & Setup)
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientConnectionManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientMessageHandler : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientEventNotifier : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.ClientSubscriptionManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.MessageProcessorService : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.EmoteSystem.EmoteLifecycleManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.EmoteSystem.EmoteManager : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.MessageFeedProcessorPipeline : manages
ServiceWorker.Core.ServiceWorkerOrchestrator o-- ServiceWorker.Core.EventBus : manages
ServiceWorker.Core.ServiceWorkerOrchestrator ..> ServiceWorker.EmoteProviderImplementations.SeventvEmoteProvider : instantiates
ServiceWorker.Core.ServiceWorkerOrchestrator ..> ServiceWorker.EmoteProviderImplementations.KickEmoteProvider : instantiates
ServiceWorker.Core.ServiceWorkerOrchestrator ..> ServiceWorker.ThirdParty.Seventv.SeventvIntegrationManager : instantiates & inits
ServiceWorker.Core.ServiceWorkerOrchestrator ..> ServiceWorker.EmoteSystem.EmoteManager : calls registerProvider()
ServiceWorker.Core.ServiceWorkerOrchestrator ..> ServiceWorker.Core.MessageFeedProcessorPipeline : calls use(middleware)

' ClientConnectionManager Relationships
ServiceWorker.Core.ClientConnectionManager ..> ServiceWorker.Core.ClientMessageHandler : forwards message
ServiceWorker.Core.ClientConnectionManager ..> ServiceWorker.Core.ClientSubscriptionManager : notifies disconnect

' ClientMessageHandler Relationships
ServiceWorker.Core.ClientMessageHandler ..> ServiceWorker.Core.ClientSubscriptionManager : delegates client requests
ServiceWorker.Core.ClientMessageHandler ..> ServiceWorker.EmoteSystem.EmoteLifecycleManager : delegates addEmoteSourceToRoom

' ClientEventNotifier Relationships
ServiceWorker.Core.ClientEventNotifier -() SubscribesEventBus : subscribes ReadyToBroadcastMessageEvent
ServiceWorker.Core.ClientEventNotifier ..> ServiceWorker.Core.ClientSubscriptionManager : gets ports for room

' MessageProcessorService Relationships
ServiceWorker.Core.MessageProcessorService -() SubscribesEventBus : subscribes ChatMessageReceivedEvent, EmoteSetUpdateEvent
ServiceWorker.Core.MessageProcessorService ..> ServiceWorker.Core.ClientSubscriptionManager : gets RoomSubscription
ServiceWorker.Core.MessageProcessorService ..> ServiceWorker.EmoteSystem.EmoteLifecycleManager : gets emoteContextKeys for room
ServiceWorker.Core.MessageProcessorService ..> ServiceWorker.Core.MessageFeedProcessorPipeline : invokes process()
ServiceWorker.Core.MessageProcessorService -() PublishesEventBus : publishes ReadyToBroadcastMessageEvent

' EventBus Relationships (No direct arrows needed for subscribers/publishers using lollipops)

' Event Publishing via Lollipop Interface
ServiceWorker.Core.ClientSubscriptionManager -() PublishesEventBus : publishes RoomSubscriptionDestroyedEvent
ServiceWorker.EmoteSystem.EmoteManager -() PublishesEventBus : publishes EmoteSetUpdateEvent
ServiceWorker.PlatformImplementations.TwitchPlatformAdapter -() PublishesEventBus : publishes RAW events
ServiceWorker.PlatformImplementations.YouTubePlatformAdapter -() PublishesEventBus : publishes RAW events
ServiceWorker.PlatformImplementations.KickPlatformAdapter -() PublishesEventBus : publishes RAW events

' Event Subscription via Lollipop Interface
ServiceWorker.EmoteProviderImplementations.SeventvEmoteProvider -() SubscribesEventBus : subscribes RoomSubscriptionDestroyedEvent
ServiceWorker.EmoteProviderImplementations.KickEmoteProvider -() SubscribesEventBus : subscribes RoomSubscriptionDestroyedEvent
ServiceWorker.ThirdParty.Seventv.SeventvIntegrationManager -() SubscribesEventBus : subscribes RoomSubscriptionDestroyedEvent

' EmoteLifecycleManager Relationships
ServiceWorker.EmoteSystem.EmoteLifecycleManager ..> ServiceWorker.EmoteSystem.EmoteManager : calls subscribeToEmoteSource / unsubscribeFromEmoteSource

' EmoteManager Relationships
ServiceWorker.EmoteSystem.EmoteManager ..> ServiceWorker.EmoteSystem.IEmoteProvider : uses registered providers
ServiceWorker.EmoteSystem.EmoteManager ..> ServiceWorker.EmoteSystem.EmoteRegistry : updates

' IEmoteProvider Relationships
ServiceWorker.EmoteSystem.IEmoteProvider <.. ServiceWorker.EmoteSystem.EmoteManager : invokes updateCallback

' MessageFeedProcessorPipeline Relationships
ServiceWorker.Core.MessageFeedProcessorPipeline ..> ServiceWorker.EmoteSystem.EmoteRegistry : queries emotes
' Note: Pipeline executes middleware provided by SeventvIntegrationManager

' ContentScriptManager Relationships
ContentScriptUI.ContentScriptManager ..> ServiceWorker.Core.ClientConnectionManager : connects via Port, sends messages
ContentScriptUI.ContentScriptManager o-- ContentScriptUI.MessageFeedView : manages

' ClientSubscriptionManager Relationships
ServiceWorker.Core.ClientSubscriptionManager ..> ServiceWorker.EmoteSystem.EmoteLifecycleManager : calls removeEmoteSourcesForRoom on destruction
ServiceWorker.Core.ClientSubscriptionManager ..> ServiceWorker.ThirdParty.Seventv.SeventvIntegrationManager : calls handleRoomSubscriptionCreated()
ServiceWorker.Core.ClientSubscriptionManager "1" *-- "*" ServiceWorker.Core.RoomSubscription : manages

' RoomSubscription Relationships
ServiceWorker.Core.RoomSubscription *-- ServiceWorker.Core.MessageStore : owns
ServiceWorker.Core.RoomSubscription *-- ServiceWorker.Core.UserStore : owns
ServiceWorker.Core.RoomSubscription *-- ServiceWorker.Core.LRUMessageCache : owns

' PlatformImplementations Relationships
ServiceWorker.PlatformImplementations.TwitchPlatformAdapter ..> ServiceWorker.Core.ClientSubscriptionManager : gets RoomSubscription
ServiceWorker.PlatformImplementations.YouTubePlatformAdapter ..> ServiceWorker.Core.ClientSubscriptionManager : gets RoomSubscription
ServiceWorker.PlatformImplementations.KickPlatformAdapter ..> ServiceWorker.Core.ClientSubscriptionManager : gets RoomSubscription

' ThirdParty Integration Relationships
ServiceWorker.ThirdParty.Seventv.SeventvIntegrationManager ..> ExtSeventvWS : connects via WebSocket

@enduml
