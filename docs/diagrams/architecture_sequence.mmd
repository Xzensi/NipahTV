sequenceDiagram
    participant CS1 as Content Script 1 (Tab A, room1)
    participant CS2 as Content Script 2 (Tab B, room2)
    participant SW_Orchestrator as SW: Orchestrator
    participant SW_ConnHandler as SW: Connection Handler
    participant SW_SubManager as SW: Subscription Manager
    participant SW_EmoteLifecycleManager as SW: Emote Lifecycle Manager
    participant SW_EmoteManager as SW: Emote Manager
    participant SW_EmoteRegistry as SW: Emote Registry
    participant SW_EmoteProvider_7TV as SW: 7TV Emote Provider
    participant SW_EmoteProvider_Kick as SW: Kick Emote Provider
    participant SW_7TV_IntMgr as SW: 7TV Integration Manager
    participant SW_PlatformAdapter as SW: Platform Adapter
    participant SW_EventBus as SW: Event Bus
    participant SW_MsgProcessor as SW: Message Processor Service
    participant SW_Pipeline as SW: Processing Pipeline
    participant SW_Notifier as SW: Client Notifier
    participant PlatformService as External Platform Service
    participant EmoteProviderServices as External Emote Services (7TV API, Kick API)
    participant Ext_7TV_EventService as External 7TV Event Service (WS)

    %% Initialization Phase %%
    Note over SW_Orchestrator, SW_Pipeline: Service Worker Starts - Initialization
    SW_Orchestrator->>+SW_EmoteProvider_7TV: new()
    SW_EmoteProvider_7TV-->>-SW_Orchestrator: provider7TV
    SW_Orchestrator->>+SW_EmoteProvider_Kick: new()
    SW_EmoteProvider_Kick-->>-SW_Orchestrator: providerKick
    SW_Orchestrator->>+SW_7TV_IntMgr: new()
    SW_7TV_IntMgr-->>-SW_Orchestrator: seventvIntMgr
    SW_Orchestrator->>+SW_EmoteManager: registerProvider(provider7TV)
    SW_EmoteManager-->>-SW_Orchestrator: (ack)
    SW_Orchestrator->>+SW_EmoteManager: registerProvider(providerKick)
    SW_EmoteManager-->>-SW_Orchestrator: (ack)
    SW_Orchestrator->>+SW_7TV_IntMgr: init()
    activate SW_7TV_IntMgr
    SW_7TV_IntMgr->>+Ext_7TV_EventService: Connect WebSocket
    Ext_7TV_EventService-->>-SW_7TV_IntMgr: WebSocket Connected
    SW_7TV_IntMgr-->>-SW_Orchestrator: (ack)
    deactivate SW_7TV_IntMgr
    SW_Orchestrator->>SW_7TV_IntMgr: getPipelineMiddleware()
    activate SW_7TV_IntMgr
    SW_7TV_IntMgr-->>SW_Orchestrator: seventvMiddleware
    deactivate SW_7TV_IntMgr
    SW_Orchestrator->>+SW_Pipeline: use(seventvMiddleware)
    SW_Pipeline-->>-SW_Orchestrator: (ack)
    Note over SW_Orchestrator, SW_Pipeline: Other core services initialized...

    Note over CS1, CS2: Browser tabs load different rooms (room1, room2)

    %% CS1 Connects & Subscribes (room1) %%
    CS1->>+SW_ConnHandler: Connect (Port 1)
    SW_ConnHandler-->>-CS1: Port 1 established


    CS1->>SW_ConnHandler: subscribeToRoom(room1)
    activate SW_ConnHandler
    SW_ConnHandler->>SW_SubManager: addSubscription(room1, port1)
    activate SW_SubManager
    Note over SW_SubManager: Creates RoomSubscription for room1 (incl. UserStore, MessageStore, LRUCache),\nassociates port1
    SW_SubManager->>SW_7TV_IntMgr: handleRoomSubscriptionCreated(room1)
    activate SW_7TV_IntMgr
    SW_7TV_IntMgr->>Ext_7TV_EventService: Send WS Subscribe (room1)
    deactivate SW_7TV_IntMgr

    alt First subscriber for room1
        SW_SubManager->>SW_PlatformAdapter: EnsureActive(room1)
        activate SW_PlatformAdapter
        SW_PlatformAdapter->>+PlatformService: Connect / Subscribe for room1
        PlatformService-->>-SW_PlatformAdapter: Connected / Subscribed
        Note over SW_PlatformAdapter: Manages connection state for room1
        SW_PlatformAdapter-->>SW_SubManager: (ack)
        deactivate SW_PlatformAdapter
    end
    SW_SubManager-->>SW_ConnHandler: (ack)
    deactivate SW_SubManager
    SW_ConnHandler-->>CS1: (ack)
    deactivate SW_ConnHandler

    CS1->>SW_ConnHandler: addEmoteSourceToRoom(room1, req1) %% e.g., 7TV global emotes %%
    activate SW_ConnHandler
    SW_ConnHandler->>SW_EmoteLifecycleManager: addEmoteSourceToRoom(room1, req1)
    activate SW_EmoteLifecycleManager
    Note over SW_EmoteLifecycleManager: Generates key1, associates with room1,\nincrements ref count for key1.
    alt Ref count for key1 is now 1
        SW_EmoteLifecycleManager->>SW_EmoteManager: subscribeToEmoteSource(req1) (async)
    end
    SW_EmoteLifecycleManager-->>SW_ConnHandler: (ack)
    deactivate SW_EmoteLifecycleManager
    SW_ConnHandler-->>CS1: (ack)
    deactivate SW_ConnHandler

    %% Emote Fetching Triggered (Async Example for req1) %%
    Note over SW_EmoteLifecycleManager, SW_EmoteManager: Async: EmoteManager processes subscribe request
    activate SW_EmoteManager
    SW_EmoteManager->>SW_EmoteProvider_7TV: canHandleRequest(req1)?
    activate SW_EmoteProvider_7TV
    SW_EmoteProvider_7TV-->>SW_EmoteManager: true
    deactivate SW_EmoteProvider_7TV
    SW_EmoteManager->>+SW_EmoteProvider_7TV: fetchEmotes(req1)
    SW_EmoteProvider_7TV->>+EmoteProviderServices: GET /emotes?context=global...
    EmoteProviderServices-->>-SW_EmoteProvider_7TV: Emote Data (Set A)
    SW_EmoteProvider_7TV-->>SW_EmoteManager: EmoteSet A
    deactivate SW_EmoteProvider_7TV
    SW_EmoteManager->>SW_EmoteRegistry: addOrUpdateEmoteSet(Set A, key1)
    activate SW_EmoteRegistry
    SW_EmoteRegistry-->>SW_EmoteManager: (ack)
    deactivate SW_EmoteRegistry
    SW_EmoteManager->>SW_EventBus: publish(EmoteSetUpdateEvent(key1))
    deactivate SW_EmoteManager

    %% 7TV Asynchronous State Update Example %%
    Note over Ext_7TV_EventService, SW_7TV_IntMgr: Async: 7TV sends cosmetic update via WS
    Ext_7TV_EventService->>SW_7TV_IntMgr: WS Message (User U1 cosmetic update)
    activate SW_7TV_IntMgr
    SW_7TV_IntMgr->>SW_7TV_IntMgr: Parse WS message, update internal state for U1
    deactivate SW_7TV_IntMgr
    %% Note: This might trigger cache invalidation via EventBus if needed %%

    %% CS2 Connects & Subscribes (room2) %%
    CS2->>+SW_ConnHandler: Connect (Port 2)
    SW_ConnHandler-->>-CS2: Port 2 established


    CS2->>SW_ConnHandler: subscribeToRoom(room2)
    activate SW_ConnHandler
    SW_ConnHandler->>SW_SubManager: addSubscription(room2, port2)
    activate SW_SubManager
    Note over SW_SubManager: Creates RoomSubscription for room2...
    SW_SubManager->>SW_7TV_IntMgr: handleRoomSubscriptionCreated(room2)
    activate SW_7TV_IntMgr
    SW_7TV_IntMgr->>Ext_7TV_EventService: Send WS Subscribe (room2)
    deactivate SW_7TV_IntMgr

    alt First subscriber for room2
        SW_SubManager->>SW_PlatformAdapter: EnsureActive(room2)
        activate SW_PlatformAdapter
        SW_PlatformAdapter->>+PlatformService: Connect / Subscribe for room2
        PlatformService-->>-SW_PlatformAdapter: Connected / Subscribed
        deactivate SW_PlatformAdapter
    end
    SW_SubManager-->>SW_ConnHandler: (ack)
    deactivate SW_SubManager
    SW_ConnHandler-->>CS2: (ack)
    deactivate SW_ConnHandler

    CS2->>SW_ConnHandler: addEmoteSourceToRoom(room2, req2) %% e.g., Kick channel emotes %%
    activate SW_ConnHandler
    SW_ConnHandler->>SW_EmoteLifecycleManager: addEmoteSourceToRoom(room2, req2)
    activate SW_EmoteLifecycleManager
    Note over SW_EmoteLifecycleManager: Generates key2, associates with room2...
    alt Ref count for key2 is now 1
        SW_EmoteLifecycleManager->>SW_EmoteManager: subscribeToEmoteSource(req2) (async)
    end
    SW_EmoteLifecycleManager-->>SW_ConnHandler: (ack)
    deactivate SW_EmoteLifecycleManager
    SW_ConnHandler-->>CS2: (ack)
    deactivate SW_ConnHandler
    %% Async fetch for req2 would happen similarly, likely using SW_EmoteProvider_Kick %%

    %% Message Received from Platform (Example for room1) %%
    Note over PlatformService, SW_EventBus: New message arrives for room1
    PlatformService->>SW_PlatformAdapter: Raw Message Data (room1, msgId: M1, sender: U1, ...)
    activate SW_PlatformAdapter
    SW_PlatformAdapter->>SW_PlatformAdapter: Parse message, user info, entitlements
    SW_PlatformAdapter->>SW_SubManager: getRoomSubscription(room1)
    activate SW_SubManager
    SW_SubManager-->>SW_PlatformAdapter: roomSub1 (contains UserStore, MessageStore)
    deactivate SW_SubManager
    SW_PlatformAdapter->>SW_PlatformAdapter: roomSub1.userStore.addOrUpdateUser(U1, ...)
    SW_PlatformAdapter->>SW_PlatformAdapter: roomSub1.messageStore.addMessage(rawMsg M1)
    SW_PlatformAdapter->>SW_EventBus: publish(ChatMessageReceivedEvent(room1, msgId: M1, senderId: U1))
    deactivate SW_PlatformAdapter

    %% Message Processing (On-Demand - Example for room1, msg M1) %%
    SW_EventBus->>SW_MsgProcessor: ChatMessageReceivedEvent(room1, msgId: M1, senderId: U1)
    activate SW_MsgProcessor
    SW_EventBus->>SW_MsgProcessor: EmoteSetUpdateEvent(key1) %% Example: Emote update also triggers processing check %%
    activate SW_MsgProcessor
    Note over SW_MsgProcessor: Handles EmoteSetUpdateEvent - invalidates cache for rooms using key1 (room1)
    deactivate SW_MsgProcessor

    SW_MsgProcessor->>SW_SubManager: getRoomSubscription(room1)
    activate SW_SubManager
    SW_SubManager-->>SW_MsgProcessor: roomSub1 (contains UserStore, MessageStore, LRUCache)
    deactivate SW_SubManager
    SW_MsgProcessor->>SW_MsgProcessor: Check roomSub1.messageCache.get(M1)
    alt Cache Miss for M1 (or invalidated)
        SW_MsgProcessor->>SW_MsgProcessor: Get rawMsg M1 from roomSub1.messageStore
        SW_MsgProcessor->>SW_MsgProcessor: Get user U1 from roomSub1.userStore
        SW_MsgProcessor->>SW_EmoteLifecycleManager: getEmoteContextKeysForRoom(room1)
        activate SW_EmoteLifecycleManager
        SW_EmoteLifecycleManager-->>SW_MsgProcessor: [key1] %% Simplified example %%
        deactivate SW_EmoteLifecycleManager
        SW_MsgProcessor->>SW_Pipeline: process(rawMsg M1, user U1, [key1])
        activate SW_Pipeline
        Note over SW_Pipeline: Applying Core Middleware (Emotes)...
        SW_Pipeline->>SW_EmoteRegistry: getEmoteByName(..., [key1])
        activate SW_EmoteRegistry
        SW_EmoteRegistry-->>SW_Pipeline: Emote details or undefined
        deactivate SW_EmoteRegistry
        Note over SW_Pipeline: Applying 7TV Middleware...
        SW_Pipeline->>SW_7TV_IntMgr: getCosmetics(U1) %% Middleware calls Manager %%
        activate SW_7TV_IntMgr
        SW_7TV_IntMgr-->>SW_Pipeline: User U1's 7TV cosmetics
        deactivate SW_7TV_IntMgr
        Note over SW_Pipeline: Applies cosmetics to message data...
        SW_Pipeline-->>SW_MsgProcessor: processedData M1'
        deactivate SW_Pipeline
        SW_MsgProcessor->>SW_MsgProcessor: roomSub1.messageCache.set(M1, processedData M1')
        SW_MsgProcessor->>SW_EventBus: publish(ReadyToBroadcastMessageEvent(room1, processedData M1'))
    else Cache Hit for M1
        SW_MsgProcessor->>SW_MsgProcessor: Get processedData M1' from roomSub1.messageCache
        SW_MsgProcessor->>SW_EventBus: publish(ReadyToBroadcastMessageEvent(room1, processedData M1'))
    end
    deactivate SW_MsgProcessor

    %% Message Broadcasting (Example for room1, msg M1) %%
    SW_EventBus->>SW_Notifier: ReadyToBroadcastMessageEvent(room1, processedData M1')
    activate SW_Notifier
    SW_Notifier->>SW_SubManager: getPortsForRoom(room1)
    activate SW_SubManager
    SW_SubManager-->>SW_Notifier: [port1] %% Only port1 is subscribed to room1 now %%
    deactivate SW_SubManager
    SW_Notifier->>CS1: processedData M1' (via port1)
    %% Note: CS2 would NOT receive this message as it's for room1 %%
    deactivate SW_Notifier

    %% UI Update (Example for room1) %%
    CS1->>CS1: Update UI with processedData M1'

    %% CS1 Disconnects %%
    Note over CS1, SW_ConnHandler: User closes Tab A (room1)
    CS1--xSW_ConnHandler: Port 1 disconnected
    activate SW_ConnHandler
    SW_ConnHandler->>SW_SubManager: removeSubscription(port1)
    activate SW_SubManager
    Note over SW_SubManager: Removes port1 from room1 subscription
    alt No subscribers left for room1
        SW_SubManager->>SW_EmoteLifecycleManager: removeEmoteSourcesForRoom(room1)
        activate SW_EmoteLifecycleManager
        Note over SW_EmoteLifecycleManager: Decrements ref counts for keys associated with room1 (e.g., key1).
        alt Ref count for key1 becomes 0
             SW_EmoteLifecycleManager->>SW_EmoteManager: unsubscribeFromEmoteSource(req1) (async)
        end
        SW_EmoteLifecycleManager-->>SW_SubManager: (ack)
        deactivate SW_EmoteLifecycleManager
        SW_SubManager->>SW_EventBus: publish(RoomSubscriptionDestroyedEvent(room1))
        SW_EventBus->>SW_7TV_IntMgr: RoomSubscriptionDestroyedEvent(room1)
        activate SW_7TV_IntMgr
        SW_7TV_IntMgr->>Ext_7TV_EventService: Send WS Unsubscribe (room1)
        SW_7TV_IntMgr->>SW_7TV_IntMgr: Perform internal cleanup for room1
        deactivate SW_7TV_IntMgr
        SW_EventBus->>SW_EmoteProvider_7TV: RoomSubscriptionDestroyedEvent(room1) %% Providers also listen %%
        activate SW_EmoteProvider_7TV
        SW_EmoteProvider_7TV->>SW_EmoteProvider_7TV: Perform internal cleanup for room1
        deactivate SW_EmoteProvider_7TV
        Note over SW_SubManager: Discards RoomSubscription for room1 (incl. stores/cache)
        SW_SubManager->>SW_PlatformAdapter: EnsureInactive(room1)
        activate SW_PlatformAdapter
        SW_PlatformAdapter->>PlatformService: Disconnect / Unsubscribe for room1
        deactivate SW_PlatformAdapter
    else Subscribers remain for room1 %% Should not happen in this scenario %%
        Note over SW_SubManager: PlatformAdapter for room1 remains active
    end
    SW_SubManager-->>SW_ConnHandler: (ack)
    deactivate SW_SubManager
    deactivate SW_ConnHandler

    Note over SW_SubManager, SW_PlatformAdapter: room2 subscription (CS2) and platform connection remain active.