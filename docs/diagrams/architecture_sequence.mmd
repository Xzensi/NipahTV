sequenceDiagram
    participant CS1 as Content Script 1 (Tab A, room1)
    participant CS2 as Content Script 2 (Tab B, room2)
    participant SW_ConnHandler as SW: Connection Handler
    participant SW_SubManager as SW: Subscription Manager
    participant SW_EmoteSystem as SW: Emote System (ELM)
    participant SW_PlatformAdapter as SW: Platform Adapter
    participant SW_EventBus as SW: Event Bus
    participant SW_MsgProcessor as SW: Message Processor Service
    participant SW_Pipeline as SW: Processing Pipeline
    participant SW_Notifier as SW: Client Notifier
    participant PlatformService as External Platform Service

    Note over CS1, CS2: Browser tabs load different rooms (room1, room2)

    %% CS1 Connects & Subscribes (room1) %%
    CS1->>+SW_ConnHandler: Connect (Port 1)
    SW_ConnHandler-->>-CS1: Port 1 established


    CS1->>SW_ConnHandler: subscribeToRoom(room1)
    activate SW_ConnHandler
    SW_ConnHandler->>SW_SubManager: addSubscription(room1, port1)
    activate SW_SubManager
    Note over SW_SubManager: Creates RoomSubscription for room1 (incl. UserStore, MessageStore, LRUCache),\nassociates port1
    %% No association needed in ELM at this stage %%

    alt First subscriber for room1
        SW_SubManager->>SW_PlatformAdapter: EnsureActive(room1)
        activate SW_PlatformAdapter
        SW_PlatformAdapter->>+PlatformService: Connect / Subscribe for room1
        PlatformService-->>-SW_PlatformAdapter: Connected / Subscribed
        Note over SW_PlatformAdapter: Manages connection state for room1
        SW_PlatformAdapter-->>SW_SubManager: (ack)
        deactivate SW_PlatformAdapter
    end
    SW_SubManager-->>SW_ConnHandler: (ack)
    deactivate SW_SubManager
    SW_ConnHandler-->>CS1: (ack)
    deactivate SW_ConnHandler

    CS1->>SW_ConnHandler: addEmoteSourceToRoom(room1, req1)
    activate SW_ConnHandler
    SW_ConnHandler->>SW_EmoteSystem: addEmoteSourceToRoom(room1, req1)
    activate SW_EmoteSystem
    Note over SW_EmoteSystem: Generates key1, associates with room1,\nincrements ref count for key1,\ntriggers internal fetch if needed (async)
    SW_EmoteSystem-->>SW_ConnHandler: (ack)
    deactivate SW_EmoteSystem
    SW_ConnHandler-->>CS1: (ack)
    deactivate SW_ConnHandler

    %% CS2 Connects & Subscribes (room2) %%
    CS2->>+SW_ConnHandler: Connect (Port 2)
    SW_ConnHandler-->>-CS2: Port 2 established


    CS2->>SW_ConnHandler: subscribeToRoom(room2)
    activate SW_ConnHandler
    SW_ConnHandler->>SW_SubManager: addSubscription(room2, port2)
    activate SW_SubManager
    Note over SW_SubManager: Creates RoomSubscription for room2 (incl. UserStore, MessageStore, LRUCache),\nassociates port2
    %% No association needed in ELM at this stage %%

    alt First subscriber for room2
        SW_SubManager->>SW_PlatformAdapter: EnsureActive(room2)
        activate SW_PlatformAdapter
        SW_PlatformAdapter->>+PlatformService: Connect / Subscribe for room2
        PlatformService-->>-SW_PlatformAdapter: Connected / Subscribed
        Note over SW_PlatformAdapter: Manages connection state for room2
        SW_PlatformAdapter-->>SW_SubManager: (ack)
        deactivate SW_PlatformAdapter
    end
    SW_SubManager-->>SW_ConnHandler: (ack)
    deactivate SW_SubManager
    SW_ConnHandler-->>CS2: (ack)
    deactivate SW_ConnHandler

    CS2->>SW_ConnHandler: addEmoteSourceToRoom(room2, req2) %% Assuming different source needed for room2 %%
    activate SW_ConnHandler
    SW_ConnHandler->>SW_EmoteSystem: addEmoteSourceToRoom(room2, req2)
    activate SW_EmoteSystem
    Note over SW_EmoteSystem: Generates key2, associates with room2,\nincrements ref count for key2,\ntriggers internal fetch if needed (async)
    SW_EmoteSystem-->>SW_ConnHandler: (ack)
    deactivate SW_EmoteSystem
    SW_ConnHandler-->>CS2: (ack)
    deactivate SW_ConnHandler

    %% Message Received from Platform (Example for room1) %%
    Note over PlatformService, SW_EventBus: New message arrives for room1
    PlatformService->>SW_PlatformAdapter: Raw Message Data (room1, msgId: M1, sender: U1, ...)
    activate SW_PlatformAdapter
    SW_PlatformAdapter->>SW_PlatformAdapter: Parse message, user info, entitlements
    SW_PlatformAdapter->>SW_SubManager: getRoomSubscription(room1)
    activate SW_SubManager
    SW_SubManager-->>SW_PlatformAdapter: roomSub1 (contains UserStore, MessageStore)
    deactivate SW_SubManager
    SW_PlatformAdapter->>SW_PlatformAdapter: roomSub1.userStore.addOrUpdateUser(U1, ...)
    SW_PlatformAdapter->>SW_PlatformAdapter: roomSub1.messageStore.addMessage(rawMsg M1)
    SW_PlatformAdapter->>SW_EventBus: publish(ChatMessageReceivedEvent(room1, msgId: M1, senderId: U1))
    deactivate SW_PlatformAdapter

    %% Message Processing (On-Demand - Example for room1, msg M1) %%
    SW_EventBus->>SW_MsgProcessor: ChatMessageReceivedEvent(room1, msgId: M1, senderId: U1)
    activate SW_MsgProcessor
    SW_MsgProcessor->>SW_SubManager: getRoomSubscription(room1)
    activate SW_SubManager
    SW_SubManager-->>SW_MsgProcessor: roomSub1 (contains UserStore, MessageStore, LRUCache)
    deactivate SW_SubManager
    SW_MsgProcessor->>SW_MsgProcessor: Check roomSub1.messageCache.get(M1)
    alt Cache Miss for M1
        SW_MsgProcessor->>SW_MsgProcessor: Get rawMsg M1 from roomSub1.messageStore
        SW_MsgProcessor->>SW_MsgProcessor: Get user U1 from roomSub1.userStore
        SW_MsgProcessor->>SW_EmoteSystem: getEmoteContextKeysForRoom(room1)
        activate SW_EmoteSystem
        SW_EmoteSystem-->>SW_MsgProcessor: [key1] %% Simplified example %%
        deactivate SW_EmoteSystem
        SW_MsgProcessor->>SW_Pipeline: process(rawMsg M1, user U1, [key1])
        activate SW_Pipeline
        Note over SW_Pipeline: Uses User data, EmoteRegistry, 3rd party state...
        SW_Pipeline-->>SW_MsgProcessor: processedData M1'
        deactivate SW_Pipeline
        SW_MsgProcessor->>SW_MsgProcessor: roomSub1.messageCache.set(M1, processedData M1')
        SW_MsgProcessor->>SW_EventBus: publish(ReadyToBroadcastMessageEvent(room1, processedData M1'))
    else Cache Hit for M1
        SW_MsgProcessor->>SW_MsgProcessor: Get processedData M1' from roomSub1.messageCache
        SW_MsgProcessor->>SW_EventBus: publish(ReadyToBroadcastMessageEvent(room1, processedData M1'))
    end
    deactivate SW_MsgProcessor

    %% Message Broadcasting (Example for room1, msg M1) %%
    SW_EventBus->>SW_Notifier: ReadyToBroadcastMessageEvent(room1, processedData M1')
    activate SW_Notifier
    SW_Notifier->>SW_SubManager: getPortsForRoom(room1)
    activate SW_SubManager
    SW_SubManager-->>SW_Notifier: [port1] %% Only port1 is subscribed to room1 now %%
    deactivate SW_SubManager
    SW_Notifier->>CS1: processedData M1' (via port1)
    %% Note: CS2 would NOT receive this message as it's for room1 %%
    deactivate SW_Notifier

    %% UI Update (Example for room1) %%
    CS1->>CS1: Update UI with processedData M1'

    %% CS1 Disconnects %%
    Note over CS1, SW_ConnHandler: User closes Tab A (room1)
    CS1--xSW_ConnHandler: Port 1 disconnected
    activate SW_ConnHandler
    SW_ConnHandler->>SW_SubManager: removeSubscription(port1)
    activate SW_SubManager
    Note over SW_SubManager: Removes port1 from room1 subscription
    alt No subscribers left for room1
        SW_SubManager->>SW_EmoteSystem: removeEmoteSourcesForRoom(room1)
        activate SW_EmoteSystem
        Note over SW_EmoteSystem: Decrements ref counts for keys associated with room1,\npotentially triggers unsubscribe (async)
        SW_EmoteSystem-->>SW_SubManager: (ack)
        deactivate SW_EmoteSystem
        Note over SW_SubManager: Discards RoomSubscription for room1 (incl. stores/cache)
        SW_SubManager->>SW_PlatformAdapter: EnsureInactive(room1)
        activate SW_PlatformAdapter
        SW_PlatformAdapter->>PlatformService: Disconnect / Unsubscribe for room1
        deactivate SW_PlatformAdapter
    else Subscribers remain for room1 %% Should not happen in this scenario %%
        Note over SW_SubManager: PlatformAdapter for room1 remains active
    end
    SW_SubManager-->>SW_ConnHandler: (ack)
    deactivate SW_SubManager
    deactivate SW_ConnHandler

    Note over SW_SubManager, SW_PlatformAdapter: room2 subscription (CS2) and platform connection remain active.