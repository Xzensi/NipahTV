---
config:
  rightAngles: true
  
  themeVariables:
    # Base settings
    darkMode: true
    fontFamily: '"Segoe UI", "Helvetica", "Arial", sans-serif'
    fontSize: '14px'
    
    # Dark Mode Palette with improved styling
    background: '#282c34'             # Dark background
    primaryColor: '#3e4451'           # Box background
    primaryBorderColor: '#5c6370'     # Box border - solid color
    primaryTextColor: '#abb2bf'       # Text inside boxes
    
    # Line and arrow styling - solid colors
    lineColor: '#5c6370'              # Arrow lines
    arrowheadColor: '#5c6370'         # Arrow heads
    
    # Text styling
    textColor: '#dcdcdc'              # General text (outside boxes, labels)
    classText: '#e6e6e6'              # Class member text
    
    # Namespace styling
    clusterBkg: '#21252b'             # Namespace background (slightly darker)
    clusterBorder: '#5c6370'          # Namespace border
    
    # Disable gradient effects
    primaryBorderColorInternal: '#5c6370'  # Inside border - match to avoid gradient
    nodeBorder: '#5c6370'             # Force consistent border
    mainBkg: '#3e4451'                # Match primaryColor for consistency
    
    # Additional styling for better contrast
    relationLabelColor: '#dcdcdc'     # Relation text
    edgeLabelBackground: '#282c34'    # Edge label background
    titleColor: '#dcdcdc'             # Title color
---
classDiagram
    direction LR

    namespace ServiceWorkerCore {
        %% Main background script orchestrator, handles client communication, manages core services. %%
        class ServiceWorkerManager {
            +EventBus eventBus
            +ClientSubscriptionManager clientSubscriptionManager
            +EmoteLifecycleManager emoteLifecycleManager %% New %%
            +EmoteManager emoteManager
            +MessageFeedProcessorPipeline messageFeedProcessorPipeline
            +UserStore userStore
            +init()
            +handleConnection(port: Port)
            +handleDisconnect(port: Port)
            +handleMessage(message: any, port: Port) %% Handles registerScope, subscribeToRoom, populateScopeWithRequest etc. %%
            -handleProcessedChatMessage(event: ProcessedChatMessageEvent)
            -handleChannelEvent(event: ChannelEventReceivedEvent)
            -handleEmoteUpdate(event: EmoteSetUpdateEvent)
            -handleConnectionError(event: ConnectionErrorEvent)
            -handleConnectionClosed(event: ConnectionClosedEvent)
        }

        %% Central hub for decoupled event publishing and subscription within the Service Worker. %%
        class EventBus {
            <<Service>>
            +subscribe(eventType: string, handler: Function)
            +unsubscribe(eventType: string, handler: Function)
            +publish(event: BaseEvent)
        }

        %% Tracks client ports per room, manages RoomSubscription lifecycle, notifies EmoteLifecycleManager on disconnect. %%
        class ClientSubscriptionManager {
            -roomSubscriptions: Map<string, RoomSubscription> %% Key: roomKey derived from RoomIdentifier %%
            +addSubscription(roomIdentifier: RoomIdentifier, port: Port, emoteScopeId: string) %% Added scopeId %%
            +removeSubscription(port: Port) %% Triggers disassociation in EmoteLifecycleManager %%
            +getPortsForRoom(roomIdentifier: RoomIdentifier): Set<Port>
            +getScopeIdForRoom(roomIdentifier: RoomIdentifier): string | undefined %% New %%
        }

        %% Subscribes to raw chat messages, gets relevant emote contexts, queries EmoteRegistry, applies transformations, publishes processed messages. %%
        class MessageFeedProcessorPipeline {
            <<Shared>>
            -middlewares: Middleware[]
            -eventBus: EventBus
            -emoteRegistry: EmoteRegistry 
            -emoteLifecycleManager: EmoteLifecycleManager %% Added for context lookup %%
            +init()
            +use(middleware: Middleware)
            -handleChatMessage(event: ChatMessageReceivedEvent) %% Needs to get scopeId/requestKeys for the room %%
        }
    }

    namespace EmoteSystem {
        %% Manages EmoteScope lifecycles, tracks request references, and triggers EmoteManager subscriptions. %%
        class EmoteLifecycleManager {
            <<ServiceWorker Component>>
            -scopes: Map<string, EmoteScopeState> %% Key: emoteScopeId (client GUID/ULID) %%
            -roomToScopeId: Map<string, string> %% Key: roomKey derived from RoomIdentifier %%
            -requestRefCounts: Map<string, number> %% Key: requestKey derived from EmoteFetchRequest %%
            -activeRequests: Map<string, EmoteFetchRequest> %% Key: requestKey %%
            -emoteManager: EmoteManager
            +registerScope(emoteScopeId: string)
            +associateRoom(roomKey: string, emoteScopeId: string)
            +disassociateRoom(roomKey: string) %% Called by ClientSubscriptionManager %%
            +populateScopeWithRequest(emoteScopeId: string, request: EmoteFetchRequest)
            +getFetchRequestKeysForScope(emoteScopeId: string): Set<string> %% New: For pipeline lookup %%
            -_generateRequestKey(request: EmoteFetchRequest): string
            -_incrementRequestRef(requestKey: string)
            -_decrementRequestRef(requestKey: string)
        }

        %% Internal state for an EmoteScope managed by EmoteLifecycleManager. %%
        class EmoteScopeState:::datatype {
             +id: string %% emoteScopeId %%
             +associatedRoomKeys: Set<string>
             +requestedFetchKeys: Set<string> %% Keys derived from EmoteFetchRequest %%
             +isActive: boolean
        }

        %% Orchestrates actual fetching via IEmoteProviders and manages EmoteRegistry based on subscribe/unsubscribe calls from EmoteLifecycleManager. %%
        class EmoteManager {
            <<ServiceWorker Component>>
            -emoteProviders: IEmoteProvider[]
            -emoteRegistry: EmoteRegistry
            -eventBus: EventBus
            -activeProviderSubscriptions: Map<string, any> %% Key: requestKey? Tracks active provider subscriptions %%
            +subscribeToEmotes(request: EmoteFetchRequest) %% Called by EmoteLifecycleManager %%
            +unsubscribeFromEmotes(request: EmoteFetchRequest) %% Called by EmoteLifecycleManager %%
            -handleProviderUpdate(update: EmoteSetUpdate) %% Callback from provider %%
        }

        %% Central storage for emotes and emote sets. Queried by MessageFeedProcessorPipeline using context info. %%
        class EmoteRegistry {
            <<ServiceWorker Component>>
            -emoteSets: Map<string, EmoteSet> %% Key: Globally unique set ID (e.g., provider:setId) %%
            -emotes: Map<string, Emote> %% Key: Globally unique emote ID (e.g., provider:emoteId) %%
            -emotesByName: Map<string, Emote> %% Key: Potentially scoped emote name %%
            -fetchKeyToSetIds: Map<string, Set<string>> %% Key: requestKey derived from EmoteFetchRequest %%
            +addOrUpdateEmoteSet(emoteSet: EmoteSet, requestKey: string)
            +removeEmoteSet(setId: string) %% Needs careful handling if sets are shared %%
            +getEmoteByName(name: string, relevantRequestKeys: string[]): Emote | undefined %% Updated parameter %%
            +getAllEmoteSetsForContexts(requestKeys: string[]): EmoteSet[] %% Updated parameter %%
        }

        %% Interface for emote providers. Fetches sets based on EmoteFetchRequest, may support updates. %%
        class IEmoteProvider {
            <<Interface>>
            +fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
            +subscribeToUpdates?(request: EmoteFetchRequest, updateCallback: (update: EmoteSetUpdate) => void): Promise<void>
            +unsubscribeFromUpdates?(request: EmoteFetchRequest): Promise<void>
            +canHandleRequest?(request: EmoteFetchRequest): boolean
        }
    }

    namespace ContentScriptUI {
        %% Manages communication with Service Worker, detects context, generates scope, initiates subscriptions and requests. %%
        class ContentScriptManager {
            <<ContentScript>>
            -port: Port
            -messageFeedView: MessageFeedView
            -currentScopeId: string | null
            +connectToServiceWorker()
            +detectAndAssociateContext() %% Generates scopeId, sends register/associate/populate messages %%
            +generateScopeId(): string %% e.g., ULID generation %%
            +registerEmoteScope(scopeId: string) %% Sends message %%
            +subscribeToRoom(roomIdentifier: RoomIdentifier, scopeId: string) %% Sends message %%
            +populateScopeWithRequest(scopeId: string, request: EmoteFetchRequest) %% Sends message %%
            +sendHeartbeat()
            -handleServiceWorkerMessage(event: BaseEvent)
            -handleDisconnect() %% Should potentially signal SW to clean up scope associations? SW handles via port disconnect. %%
        }

        %% Renders messages, emotes, and other UI elements in the content script. %%
        class MessageFeedView {
            <<UI Component (SolidJS)>>
            +renderProcessedMessage(data: ProcessedChatMessageEvent)
            +updateEmotes(data: EmoteSetUpdateEvent)
            +renderChannelEvent?(data: ChannelEventReceivedEvent)
        }
    }

    %% Data Structures %%
    class Emote:::datatype { +id; +name; +url; +provider; }
    class EmoteSet:::datatype { +id; +provider; +emotes; }
    class RoomIdentifier:::datatype { +platform; +roomId; } 
    %% Defines an emote source/context %%
    class EmoteFetchRequest:::datatype { +contextType; +identifiers; +targetProvider?; } 
    class MessageFeedEntry:::datatype { +id; +type; +timestamp; +senderUserId; /* ... platform specific raw data? */ }
    class ProcessedData:::datatype { +originalEntry; +displayParts; }
    %% Updated to link to requestKey? %%
    class EmoteSetUpdate:::datatype { +requestKey?; +addedSets?; +removedSets?; +updatedSets?; } 
    class MessageFeedConnectionConfig:::datatype { +type; +url; +auth?; +expectedDataTypes; }
    class ChannelEvent:::datatype { +type; +timestamp; +channelId; /* ... common event properties */ }
    class FollowEvent:::datatype { <<Extends ChannelEvent>>; +followerUsername; }
    class BaseEvent:::datatype {
        +timestamp: number
        +roomId: string 
        +platform: string
    }
    class ChatMessageReceivedEvent:::datatype {
        <<Extends BaseEvent>>
        +type: "ChatMessageReceived"
        +message: MessageFeedEntry
    }
    class ChannelEventReceivedEvent:::datatype {
        <<Extends BaseEvent>>
        +type: "ChannelEventReceived"
        +event: ChannelEvent
    }
    class ProcessedChatMessageEvent:::datatype {
        <<Extends BaseEvent>>
        +type: "ProcessedChatMessage"
        +processedData: ProcessData
    }
    %% Signals that emotes relevant to a context (requestKey) have changed. %%
    class EmoteSetUpdateEvent:::datatype {
        <<Extends BaseEvent>>
        +type: "EmoteSetUpdate"
        +update: EmoteSetUpdate 
    }
    class ConnectionErrorEvent:::datatype {
        <<Extends BaseEvent>>
        +type: "ConnectionError"
        +messageFeedId: string
        +error: any
    }
    class ConnectionClosedEvent:::datatype {
        <<Extends BaseEvent>>
        +type: "ConnectionClosed"
        +messageFeedId: string
        +reason?: string
    }
    class ConnectionDataCallbacks:::datatype {
        +onData: (data: any) => void
        +onError: (error: any) => void
        +onClose: () => void
    }
    class ParsingContext:::datatype {
        +roomId: string 
        +platform: string
        +emoteScopeId: string %% Added %%
    }
    class SubscriptionIntent:::datatype {
        +type: string
        +identifiers: Map<string, string>
        +options: Map<string, any>
    }
    class PlatformCapabilities:::datatype {
        +supportedFeeds: string[]
        +requiredIdentifiers: string[]
        +optionalFeatures: string[]
    }
    class RoomSubscription:::datatype {
        +ports: Set<Port>
        +messageStore: MessageStore
        +activeUserIds: Set<string>
        +emoteScopeId: string %% Added %%
    }
    class MessageStore {
        +addMessage(msg: MessageFeedEntry)
        +getHistory(start,end): MessageFeedEntry[]
    }
    class UserStore {
        -users: Map<string, User>
        +getUser(userId: string): User
        +incrementRoomSubscriptionRef(userId: string)
        +decrementRoomSubscriptionRef(userId: string)
        +updateUserEntitlements(userId: string, entitlements: Entitlement[])
    }
    class User:::datatype {
        +userId: string
        +displayName: string
        +entitlements: Entitlement[]
        +roomSubscriptionRefCount: number
    }
    class Entitlement:::datatype {
        +kind: string
    }


    %% Platform Implementations (Black Boxes) %%
    class TwitchPlatformAdapter {
        +getCapabilities(): PlatformCapabilities
        +subscribe(intent: SubscriptionIntent)
        +publishEvent(event: BaseEvent)
    }
    class YouTubePlatformAdapter {
        +getCapabilities(): PlatformCapabilities
        +subscribe(intent: SubscriptionIntent)
        +publishEvent(event: BaseEvent)
    }
    class KickPlatformAdapter {
        +getCapabilities(): PlatformCapabilities
        +subscribe(intent: SubscriptionIntent)
        +publishEvent(event: BaseEvent)
    }

    %% Emote Provider Implementations %%
    SeventvEmoteProvider <|-- IEmoteProvider : implements
    class SeventvEmoteProvider {
        +fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
        
    }

    KickEmoteProvider <|-- IEmoteProvider : implements
    class KickEmoteProvider {
        +fetchEmotes(request: EmoteFetchRequest): Promise<EmoteSet[]>
        
    }

    %% Relationships %%
    ServiceWorkerManager o-- EventBus : manages
    ServiceWorkerManager o-- ClientSubscriptionManager
    ServiceWorkerManager o-- EmoteLifecycleManager : manages
    ServiceWorkerManager o-- EmoteManager
    ServiceWorkerManager o-- MessageFeedProcessorPipeline
    ServiceWorkerManager o-- UserStore : manages
    ServiceWorkerManager ..> EventBus : subscribes
    ServiceWorkerManager ..> EmoteLifecycleManager : delegates client requests
    ServiceWorkerManager ..> ClientSubscriptionManager : delegates client requests

    EventBus --> ServiceWorkerManager : used by (subscribes)
    EventBus --> MessageFeedProcessorPipeline : used by (subscribes/publishes)
    EventBus --> EmoteManager : used by (publishes EmoteSetUpdateEvent)
    EventBus --> TwitchPlatformAdapter : used by (publishes)
    EventBus --> YouTubePlatformAdapter : used by (publishes)
    EventBus --> KickPlatformAdapter : used by (publishes)

    EmoteLifecycleManager o-- EmoteScopeState : manages state
    EmoteLifecycleManager --> EmoteManager : calls subscribe/unsubscribe
    EmoteLifecycleManager ..> EmoteRegistry : uses requestKeys for context

    EmoteManager --> IEmoteProvider : uses
    EmoteManager o-- EmoteRegistry : manages updates
    EmoteManager ..> EventBus : publishes EmoteSetUpdateEvent
    
    IEmoteProvider ..> EmoteManager : invokes updateCallback

    EmoteRegistry o-- "*" EmoteSet : contains
    EmoteRegistry o-- "*" Emote : contains
    EmoteSet "1" *-- "*" Emote : contains

    MessageFeedProcessorPipeline ..> ProcessedChatMessageEvent : publishes
    MessageFeedProcessorPipeline --> EmoteRegistry : queries emotes
    MessageFeedProcessorPipeline --> EmoteLifecycleManager : gets requestKeys for scope
    MessageFeedProcessorPipeline --> ClientSubscriptionManager : gets scopeId for room

    ContentScriptManager ..> ServiceWorkerManager : connects via Port, sends messages
    ContentScriptManager o-- MessageFeedView

    ClientSubscriptionManager --> EmoteLifecycleManager : calls disassociateRoom
    ClientSubscriptionManager o-- "*" RoomSubscription : manages
    RoomSubscription o-- MessageStore : owns
    RoomSubscription ..> EmoteScopeState : references via ID

    %% Platform Implementations publish events to the EventBus %%
    TwitchPlatformAdapter ..> EventBus : publishes
    YouTubePlatformAdapter ..> EventBus : publishes
    KickPlatformAdapter ..> EventBus : publishes

    TwitchPlatformAdapter ..> PlatformCapabilities : provides
    YouTubePlatformAdapter ..> PlatformCapabilities : provides
    KickPlatformAdapter ..> PlatformCapabilities : provides

    TwitchPlatformAdapter ..> SubscriptionIntent : uses
    YouTubePlatformAdapter ..> SubscriptionIntent : uses
    KickPlatformAdapter ..> SubscriptionIntent : uses

    EmoteManager ..> SeventvEmoteProvider : uses
    EmoteManager ..> KickEmoteProvider : uses

    UserStore o-- "*" User : stores
    User "1" *-- "*" Emote : has (via entitlements)

    MessageFeedProcessorPipeline --> ClientSubscriptionManager : signals message (indirectly via event?)
    ClientSubscriptionManager --> MessageStore : adds message 
    ClientSubscriptionManager --> UserStore : updates ref counts 
    IEmoteProvider ..> UserStore : updates entitlements 


    %% Class Definitions for styling must be at the end %%
    classDef datatype fill:#4d443c,stroke:#6e6359,stroke-width:2px