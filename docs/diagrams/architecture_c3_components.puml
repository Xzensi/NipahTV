@startuml architecture_c3_components
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' Base Colors
!$color_bg             = "#272822"
!$color_fg             = "#F8F8F2"
!$color_border         = "#75715E"

' Accent Colors
!$color_accent_red     = "#F92672"
!$color_accent_green   = "#A6E22E"
!$color_accent_yellow  = "#3C3B2F"
!$color_accent_blue    = "#66D9EF"
!$color_accent_orange  = "#FD971F"
!$color_accent_purple  = "#AE81FF"

' Specialized
!$color_datatype_bg    = "#444233"
!$color_interface_bg   = "#2F556B"
!$color_note_bg        = "#49483E"
!$color_note_border    = "#75715E"
!$color_note_font      = "#F8F8F2"

skinparam {
    Shadowing false
    BackgroundColor $color_bg

    DefaultFontColor $color_fg
    DefaultFontName "Consolas", "Monaco", monospace
    DefaultFontSize 14

    ArrowColor $color_accent_red
    ArrowFontColor $color_fg
    ArrowThickness 3

    BorderColor $color_border

    PackageBorderColor $color_accent_purple
    PackageBackgroundColor $color_bg
    PackageTitleFontColor $color_accent_blue
    PackageFontStyle bold

    ClassBackgroundColor $color_accent_yellow
    ClassBorderColor $color_accent_red
    ClassFontColor $color_fg
    ClassAttributeFontColor $color_accent_green
    ClassStereotypeFontColor $color_accent_orange

    InterfaceBackgroundColor $color_interface_bg
    InterfaceBorderColor $color_accent_red
    InterfaceFontColor $color_fg
    InterfaceAttributeFontColor $color_fg
    InterfaceStereotypeFontColor $color_accent_orange

    NoteBackgroundColor $color_note_bg
    NoteBorderColor $color_note_border
    NoteFontColor $color_note_font

    LegendBackgroundColor $color_border
    LegendBorderColor $color_fg
    LegendFontColor $color_fg
}

skinparam rectangle<<System_Boundary>><<Container_Boundary>> {
    BorderColor $color_accent_purple
    FontColor $color_accent_purple
}

' General enhancements for better visuals
' skinparam roundCorner 10
skinparam padding 12
skinparam wrapWidth 200
skinparam maxMessageSize 150

title Component Diagram for Service Worker (Level 3 - On-Demand Processing)

' External Systems / Actors
Person_Ext(user, "User", "Uses the platform (e.g., Kick)")
System_Ext(platformServices, "Platform Services", "e.g., Kick Chat API/WS")
System_Ext(emoteProviderServices, "Emote Provider Services", "e.g., 7TV API/WS, Kick Emote API")

System_Boundary(browserTab, "Browser Tab") {
    Container(contentScript, "Content Script", "Replaces native chat UI, detects context, communicates with Service Worker")
}

' Service Worker Container Boundary
Container_Boundary(serviceWorker, "NipahTV Service Worker") {

    ' Core Components
    Component(orchestrator, "ServiceWorkerOrchestrator", "Initializes core services")
    Component(connectionManager, "ClientConnectionManager", "Manages client Port connections")
    Component(messageHandler, "ClientMessageHandler", "Routes incoming client messages")
    Component(eventNotifier, "ClientEventNotifier", "Subscribes to ReadyToBroadcastMessageEvent, broadcasts final processed data to clients")
    Component(eventBus, "EventBus", "Internal pub/sub for decoupled communication")
    Component(clientSubManager, "ClientSubscriptionManager", "Manages RoomSubscriptions (incl. UserStore, MessageStore, LRUMessageCache), client ports, scope associations")
    Component(messageProcessor, "MessageProcessorService", "Orchestrates on-demand message processing, caching, and cache invalidation")
    Component(pipeline, "MessageFeedProcessorPipeline", "Invoked on-demand by MessageProcessorService, processes raw message using User data and Emote context")

    ' Emote System Components
    Component(emoteLifecycleManager, "EmoteLifecycleManager", "Manages EmoteScope lifecycles & EmoteFetchRequest reference counting")
    Component(emoteManager, "EmoteManager", "Orchestrates provider interactions (fetch/subscribe) based on lifecycle manager calls")
    ComponentDb(emoteRegistry, "EmoteRegistry", "Map/Memory", "Stores fetched EmoteSets and Emotes, provides lookup")

    ' Adapter/Provider Components (Representing Groups)
    Component(platformAdapters, "Platform Adapters", "Connects to platforms, parses data, updates room's UserStore, publishes RAW events")
    Component(emoteProviders, "Emote Providers", "Implements IEmoteProvider, fetches/subscribes to external emote services")

    note right of clientSubManager
        Manages RoomSubscription instances.
        Each RoomSubscription contains:
        - UserStore (Room-specific user state/entitlements)
        - MessageStore (Raw messages)
        - LRUMessageCache (Processed messages)
    end note
}

' Relationships within Service Worker

' Client Connection Flow
Rel(connectionManager, messageHandler, "Forwards messages")
Rel(connectionManager, clientSubManager, "Notifies disconnect")

' Client Message Handling Flow
Rel(messageHandler, clientSubManager, "Delegates subscription requests")
Rel(messageHandler, emoteLifecycleManager, "Delegates registerSessionScope, etc.")

' Event Broadcasting Flow (Simplified)
Rel(eventNotifier, eventBus, "Subscribes to ReadyToBroadcastMessageEvent")
Rel(eventNotifier, clientSubManager, "Gets ports for room")

' Subscription Management
Rel(clientSubManager, emoteLifecycleManager, "Notifies on room disassociation")

' Emote System Flow
Rel(emoteLifecycleManager, emoteManager, "Triggers subscribeToEmoteSource / unsubscribeFromEmoteSource")
Rel(emoteManager, emoteProviders, "Uses (fetch/subscribe/unsubscribe)")
Rel(emoteManager, emoteRegistry, "Updates with fetched data")
Rel(emoteManager, eventBus, "Publishes EmoteSetUpdateEvent")
Rel(emoteProviders, emoteManager, "Sends updates via callback")

' Message Processing Flow (On-Demand)
Rel(messageProcessor, eventBus, "Subscribes to ChatMessageReceivedEvent, EmoteSetUpdateEvent")
Rel(messageProcessor, clientSubManager, "Gets RoomSubscription (UserStore, MessageStore, Cache)")
Rel(messageProcessor, emoteLifecycleManager, "Gets emoteContextKeys for scope")
Rel(messageProcessor, pipeline, "Invokes processing")
Rel(messageProcessor, eventBus, "Publishes ReadyToBroadcastMessageEvent")

' Platform Adapters
Rel(platformAdapters, eventBus, "Publishes RAW ChatMessageReceivedEvent, etc.")
Rel(platformAdapters, clientSubManager, "Gets RoomSubscription (to update UserStore)")

' External Relationships
Rel(user, contentScript, "Interacts with")
Rel(contentScript, connectionManager, "Connects via Port, Sends Requests", "chrome.runtime.Port")
Rel(eventNotifier, contentScript, "Sends Processed Messages", "chrome.runtime.Port")

Rel(platformAdapters, platformServices, "Connects to, Fetches data from", "HTTPS/WSS")
Rel(emoteProviders, emoteProviderServices, "Fetches data from, Subscribes to", "HTTPS/WSS")

@enduml