@startuml architecture_datatypes

' Monokai-inspired Improved PlantUML Theme (Copied for consistency)
' Base Colors
!$color_bg             = "#272822"
!$color_fg             = "#F8F8F2"
!$color_border         = "#75715E"

' Accent Colors
!$color_accent_red     = "#F92672"
!$color_accent_green   = "#A6E22E"
!$color_accent_yellow  = "#3C3B2F"
!$color_accent_blue    = "#66D9EF"
!$color_accent_orange  = "#FD971F"
!$color_accent_purple  = "#AE81FF"

' Specialized
!$color_datatype_bg    = "#444233"
!$color_interface_bg   = "#2F556B"
!$color_note_bg        = "#49483E"
!$color_note_border    = "#75715E"
!$color_note_font      = "#F8F8F2"

skinparam {
    Shadowing false
    BackgroundColor $color_bg

    DefaultFontColor $color_fg
    DefaultFontName "Consolas", "Monaco", monospace
    DefaultFontSize 14

    ArrowColor $color_accent_red
    ArrowFontColor $color_fg
    ArrowThickness 3

    BorderColor $color_border

    PackageBorderColor $color_accent_purple
    PackageBackgroundColor $color_bg
    PackageTitleFontColor $color_accent_blue
    PackageFontStyle bold

    ClassBackgroundColor $color_accent_yellow
    ClassBorderColor $color_accent_red
    ClassFontColor $color_fg
    ClassAttributeFontColor $color_accent_green
    ClassStereotypeFontColor $color_accent_orange

    InterfaceBackgroundColor $color_interface_bg
    InterfaceBorderColor $color_accent_red
    InterfaceFontColor $color_fg
    InterfaceAttributeFontColor $color_fg
    InterfaceStereotypeFontColor $color_accent_orange

    NoteBackgroundColor $color_note_bg
    NoteBorderColor $color_note_border
    NoteFontColor $color_note_font

    LegendBackgroundColor $color_border
    LegendBorderColor $color_fg
    LegendFontColor $color_fg
}

skinparam class<<datatype>> {
    BackgroundColor $color_datatype_bg
    BorderColor $color_border
    FontColor $color_fg
    AttributeFontColor $color_accent_blue
    StereotypeFontColor $color_accent_orange
}
skinparam class<<db_schema>> {
    BackgroundColor $color_datatype_bg
    BorderColor $color_accent_purple
    FontColor $color_fg
    AttributeFontColor $color_accent_blue
    StereotypeFontColor $color_accent_orange
}
skinparam class<<db_model>> {
    BackgroundColor $color_accent_blue
    BorderColor $color_accent_red
    FontColor $color_fg
    AttributeFontColor $color_fg
    StereotypeFontColor $color_accent_orange
}


' General enhancements for better visuals
' skinparam roundCorner 10
skinparam padding 10
skinparam linetype ortho
' left to right direction

' --- Data Type Definitions ---

class Emote <<datatype>> {
    + id: string
    + name: string
    + url: string
    + provider: string
}
class EmoteSet <<datatype>> {
    + id: string
    + provider: string
    + emotes: Emote[]
}
class RoomIdentifier <<datatype>> {
    + platform: string
    + roomId: string
}
class EmoteFetchRequest <<datatype>> {
    + contextType: string
    + identifiers: Map<string, string>
    + targetProvider?: string
}
note top of EmoteFetchRequest : Defines an emote source/context
class PlatformEntitlementData <<datatype>> {
    + type: string ' e.g., "badge", "name_paint"
    + id: string   ' e.g., "moderator", "vip"
    + url?: string ' For badges
    + data?: any  ' For other cosmetics like name paint color
}
note top of PlatformEntitlementData : Represents a single platform entitlement (badge, cosmetic)

class User <<datatype>> {
    + userId: string
    + displayName: string
    + platformEntitlements: PlatformEntitlementData[]
}
note top of User : Represents a user's state within a specific room scope.\nStored in UserStore.

class MessageFeedEntry <<datatype>> {
    + id: string
    + type: string
    + timestamp: number
    + senderUserId: string
    + content: string ' Or structured content
    + ' ... other platform specific raw data?
}
note top of MessageFeedEntry : Represents a RAW message entry from the platform feed.\nStored in MessageStore.

class ProcessedChatMessageData <<datatype>> {
    + originalMessageId: string
    + sender: User ' Snapshot of sender state at processing time
    + displayParts: any[] ' e.g., text, emotes, badges
    + timestamp: number
    + ' ... other processed metadata?
}
note top of ProcessedChatMessageData : Result of processing a raw message via the pipeline.\nContains combined entitlements/cosmetics.\nStored in LRUMessageCache and sent to clients.

class EmoteSetUpdate <<datatype>> {
    + requestKey?: string
    + addedSets?: EmoteSet[]
    + removedSets?: EmoteSet[]
    + updatedSets?: EmoteSet[]
}
note top of EmoteSetUpdate : Data about emote set changes.

class MessageFeedConnectionConfig <<datatype>> {
    + type: string
    + url: string
    + auth?: any
    + expectedDataTypes: string[]
}
class ChannelEvent <<datatype>> {
    + type: string
    + timestamp: number
    + channelId: string
    + ' ... common event properties
}
class FollowEvent <<datatype>> {
    + followerUsername: string
}

class BaseEvent <<datatype>> {
    + timestamp: number
    + roomId: string
    + platform: string
}
class ChatMessageReceivedEvent <<datatype>> {
    + type: "ChatMessageReceived"
    + messageId: string
    + senderUserId: string
    ' Minimal info needed to trigger processing
}
note top of ChatMessageReceivedEvent : Signals a raw message arrived. Minimal data.\nTriggers MessageProcessorService.

class ChannelEventReceivedEvent <<datatype>> {
    + type: "ChannelEventReceived"
    + event: ChannelEvent
}

class ReadyToBroadcastMessageEvent <<datatype>> {
    + type: "ReadyToBroadcastMessage"
    + processedData: ProcessedChatMessageData
}
note top of ReadyToBroadcastMessageEvent : Signals a message is processed and ready for broadcast.\nContains the final data. Triggers ClientEventNotifier.

class EmoteSetUpdateEvent <<datatype>> {
    + type: "EmoteSetUpdate"
    + update: EmoteSetUpdate
}
note top of EmoteSetUpdateEvent : Signals that emotes relevant to a context (requestKey) have changed.\nTriggers MessageProcessorService for cache invalidation.

class ConnectionErrorEvent <<datatype>> {
    + type: "ConnectionError"
    + messageFeedId: string
    + error: any
}
class ConnectionClosedEvent <<datatype>> {
    + type: "ConnectionClosed"
    + messageFeedId: string
    + reason?: string
}

class RoomSubscriptionDestroyedEvent <<datatype>> {
    + type: "RoomSubscriptionDestroyed"
    + roomIdentifier: RoomIdentifier
}
note top of RoomSubscriptionDestroyedEvent : Signals a RoomSubscription is being destroyed.\nAllows internal modules (e.g., 3rd party providers) to clean up room-specific state.

class ConnectionDataCallbacks <<datatype>> {
    + onData: (data: any) => void
    + onError: (error: any) => void
    + onClose: () => void
}
class PipelineContext <<datatype>> {
    + rawMessage: MessageFeedEntry
    + sender: User
    + emoteContextKeys: Set<string>
}
note top of PipelineContext : Input context for MessageFeedProcessorPipeline.process()

class SubscriptionIntent <<datatype>> {
    + type: string
    + identifiers: Map<string, string>
    + options: Map<string, any>
}
class PlatformCapabilities <<datatype>> {
    + supportedFeeds: string[]
    + requiredIdentifiers: string[]
    + optionalFeatures: string[]
}

class UserStore <<Room Scoped>> {
    - users: Map<string, User>
    + getUser(userId: string): User | undefined
    + addOrUpdateUser(userId: string, displayName: string, entitlements: PlatformEntitlementData[])
}
note top of UserStore : Stores User state per room.

class LRUMessageCache <<Room Scoped>> {
    + get(messageId: string): ProcessedChatMessageData | undefined
    + set(messageId: string, data: ProcessedChatMessageData)
    + invalidate()
    + invalidateUser?(userId: string)
}
note top of LRUMessageCache : Caches processed message data per room.

class RoomSubscription <<datatype>> {
    + ports: Set<Port>
    + messageStore: MessageStore
    + userStore: UserStore
    + messageCache: LRUMessageCache
}
class MessageStore <<Room Scoped>> {
    + addMessage(msg: MessageFeedEntry)
    + getMessage(messageId: string): MessageFeedEntry | undefined
    + getHistory(limit: number): MessageFeedEntry[]
}
note top of MessageStore : Holds raw message data for a RoomSubscription.

' --- Database Related Data Types ---
class SettingDocument <<datatype>> {
    + key: string
    + value: any
}
note top of SettingDocument : Structure for a setting in CoreDatabaseService.

class SettingsModel <<db_model>> {
    - settingsTable: Table<SettingDocument, string>
    + constructor(settingsTable: Table<SettingDocument, string>)
    + getSetting(key: string): Promise<SettingDocument | undefined>
    + getSettingValue<V>(key: string, defaultValue?: V): Promise<V | undefined>
    + setSetting(key: string, value: any): Promise<string>
    + deleteSetting(key: string): Promise<void>
    + getAllSettings(): Promise<SettingDocument[]>
}
note top of SettingsModel : Manages CRUD for 'settings' table in CoreDatabaseService.

interface "Table<TDoc, TKey>" as DexieTable<TDoc, TKey> <<Dexie Generic>> {
  ' Dexie.Table generic interface
}
note top of DexieTable : Represents Dexie's generic Table interface.

class CoreDbSchema <<db_schema>> {
    <<Dexie Extension>>
    + settings: Table<SettingDocument, string>
    ' ... other core tables
}
note top of CoreDbSchema : Typed Dexie schema for CoreDatabaseService.

class SeventvDbSchema <<db_schema>> {
    <<Dexie Extension>>
    ' ... 7TV specific tables (e.g., userCache: Table<SeventvUserCache, string>)
}
note top of SeventvDbSchema : Typed Dexie schema for SeventvDatabaseService.


' --- Internal Data Type Relationships ---

EmoteSet "1" *-- "*" Emote : contains

FollowEvent --|> ChannelEvent
note left of FollowEvent : Extends ChannelEvent

ChatMessageReceivedEvent --|> BaseEvent
note left of ChatMessageReceivedEvent : Extends BaseEvent

ChannelEventReceivedEvent --|> BaseEvent
note left of ChannelEventReceivedEvent : Extends BaseEvent

ReadyToBroadcastMessageEvent --|> BaseEvent
note left of ReadyToBroadcastMessageEvent : Extends BaseEvent

EmoteSetUpdateEvent --|> BaseEvent

ConnectionErrorEvent --|> BaseEvent
note left of ConnectionErrorEvent : Extends BaseEvent

ConnectionClosedEvent --|> BaseEvent
note left of ConnectionClosedEvent : Extends BaseEvent

RoomSubscriptionDestroyedEvent --|> BaseEvent
note left of RoomSubscriptionDestroyedEvent : Extends BaseEvent

RoomSubscription *-- MessageStore : owns
RoomSubscription *-- UserStore : owns
RoomSubscription *-- LRUMessageCache : owns
UserStore "1" *-- "*" User : stores

' --- Database Relationships ---
CoreDbSchema "1" *-- "1" DexieTable : settings is a
DexieTable <|.. SettingDocument : (settings table of type)
SettingsModel o-- DexieTable : uses (settingsTable)
SettingsModel ..> SettingDocument : operates on

' Conceptual: CoreDatabaseService would use CoreDbSchema and expose SettingsModel.
' Conceptual: SeventvDatabaseService would use SeventvDbSchema.

@enduml